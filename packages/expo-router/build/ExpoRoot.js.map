{"version":3,"file":"ExpoRoot.js","sourceRoot":"","sources":["../src/ExpoRoot.tsx"],"names":[],"mappings":"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","sourcesContent":["'use client';\n\nimport { LinkingOptions, NavigationAction } from '@react-navigation/native';\nimport Constants from 'expo-constants';\nimport Linking from 'expo-linking';\nimport { StatusBar } from 'expo-status-bar';\nimport React, { type PropsWithChildren, Fragment, type ComponentType, useMemo } from 'react';\nimport { Platform } from 'react-native';\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\n\nimport UpstreamNavigationContainer from './fork/NavigationContainer';\nimport { ExpoLinkingOptions } from './getLinkingConfig';\nimport { useInitializeExpoRouter } from './global-state/router-store';\nimport ServerContext, { ServerContextType } from './global-state/serverContext';\nimport { RequireContext } from './types';\nimport { SplashScreen } from './views/Splash';\n\nexport type ExpoRootProps = {\n  context: RequireContext;\n  location?: URL | string;\n  wrapper?: ComponentType<PropsWithChildren>;\n  linking?: Partial<ExpoLinkingOptions>;\n};\n\nexport type NativeIntent = {\n  redirectSystemPath?: (event: {\n    path: string | null;\n    initial: boolean;\n  }) => Promise<string | null | undefined> | string | null | undefined;\n  subscribe?: (\n    listener: (path: string) => void\n  ) => Promise<() => void | void> | (() => void) | void;\n};\n\nconst isTestEnv = process.env.NODE_ENV === 'test';\n\nconst INITIAL_METRICS =\n  Platform.OS === 'web' || isTestEnv\n    ? {\n        frame: { x: 0, y: 0, width: 0, height: 0 },\n        insets: { top: 0, left: 0, right: 0, bottom: 0 },\n      }\n    : undefined;\n\nconst hasViewControllerBasedStatusBarAppearance =\n  Platform.OS === 'ios' &&\n  !!Constants.expoConfig?.ios?.infoPlist?.UIViewControllerBasedStatusBarAppearance;\n\nexport function ExpoRoot({ wrapper: ParentWrapper = Fragment, ...props }: ExpoRootProps) {\n  /*\n   * Due to static rendering we need to wrap these top level views in second wrapper\n   * View's like <SafeAreaProvider /> generate a <div> so if the parent wrapper\n   * is a HTML document, we need to ensure its inside the <body>\n   */\n  const wrapper = ({ children }: PropsWithChildren) => {\n    return (\n      <ParentWrapper>\n        <SafeAreaProvider\n          // SSR support\n          initialMetrics={INITIAL_METRICS}>\n          {children}\n          {/* Users can override this by adding another StatusBar element anywhere higher in the component tree. */}\n          {!hasViewControllerBasedStatusBarAppearance && <StatusBar style=\"auto\" />}\n        </SafeAreaProvider>\n      </ParentWrapper>\n    );\n  };\n\n  return <ContextNavigator {...props} wrapper={wrapper} />;\n}\n\nconst initialUrl =\n  Platform.OS === 'web' && typeof window !== 'undefined'\n    ? new URL(window.location.href)\n    : undefined;\n\nfunction ContextNavigator({\n  context,\n  location: initialLocation = initialUrl,\n  wrapper: WrapperComponent = Fragment,\n  linking = {},\n}: ExpoRootProps) {\n  // location and linking.getInitialURL are both used to initialize the router state\n  //  - location is used on web and during static rendering\n  //  - linking.getInitialURL is used on native\n  const serverContext = useMemo(() => {\n    let contextType: ServerContextType = {};\n\n    if (initialLocation instanceof URL) {\n      contextType = {\n        location: {\n          pathname: initialLocation.pathname,\n          search: initialLocation.search,\n        },\n      };\n    } else if (typeof initialLocation === 'string') {\n      // The initial location is a string, so we need to parse it into a URL.\n      const url = new URL(initialLocation, 'http://placeholder.base');\n      contextType = {\n        location: {\n          pathname: url.pathname,\n          search: url.search,\n        },\n      };\n    }\n\n    return contextType;\n  }, []);\n\n  linking = getNativeLinking(context, linking, serverContext.location);\n\n  const store = useInitializeExpoRouter(context, linking);\n\n  if (store.shouldShowTutorial()) {\n    SplashScreen.hideAsync();\n    if (process.env.NODE_ENV === 'development') {\n      const Tutorial = require('./onboard/Tutorial').Tutorial;\n      return (\n        <WrapperComponent>\n          <Tutorial />\n        </WrapperComponent>\n      );\n    } else {\n      // Ensure tutorial styles are stripped in production.\n      return null;\n    }\n  }\n\n  const Component = store.rootComponent;\n\n  return (\n    <UpstreamNavigationContainer\n      ref={store.navigationRef}\n      initialState={store.initialState}\n      linking={store.linking as LinkingOptions<any>}\n      onUnhandledAction={onUnhandledAction}\n      documentTitle={{\n        enabled: false,\n      }}>\n      <ServerContext.Provider value={serverContext}>\n        <WrapperComponent>\n          <Component />\n        </WrapperComponent>\n      </ServerContext.Provider>\n    </UpstreamNavigationContainer>\n  );\n}\n\nlet onUnhandledAction: (action: NavigationAction) => void;\n\nif (process.env.NODE_ENV !== 'production') {\n  onUnhandledAction = (action: NavigationAction) => {\n    const payload: Record<string, any> | undefined = action.payload;\n\n    let message = `The action '${action.type}'${\n      payload ? ` with payload ${JSON.stringify(action.payload)}` : ''\n    } was not handled by any navigator.`;\n\n    switch (action.type) {\n      case 'NAVIGATE':\n      case 'PUSH':\n      case 'REPLACE':\n      case 'JUMP_TO':\n        if (payload?.name) {\n          message += `\\n\\nDo you have a route named '${payload.name}'?`;\n        } else {\n          message += `\\n\\nYou need to pass the name of the screen to navigate to. This may be a bug.`;\n        }\n\n        break;\n      case 'GO_BACK':\n      case 'POP':\n      case 'POP_TO_TOP':\n        message += `\\n\\nIs there any screen to go back to?`;\n        break;\n      case 'OPEN_DRAWER':\n      case 'CLOSE_DRAWER':\n      case 'TOGGLE_DRAWER':\n        message += `\\n\\nIs your screen inside a Drawer navigator?`;\n        break;\n    }\n\n    message += `\\n\\nThis is a development-only warning and won't be shown in production.`;\n\n    if (process.env.NODE_ENV === 'test') {\n      throw new Error(message);\n    }\n    console.error(message);\n  };\n} else {\n  onUnhandledAction = function () {};\n}\n\nfunction getNativeLinking(\n  context: RequireContext,\n  linking: Partial<ExpoLinkingOptions>,\n  serverLocation: ServerContextType['location']\n): Partial<ExpoLinkingOptions> {\n  const serverUrl = serverLocation\n    ? `${serverLocation.pathname}${serverLocation.search}`\n    : undefined;\n\n  if (Platform.OS === 'web') {\n    // This might slightly counterintuitive, as if we have a location we're not rendering on a native platform\n    // But the ExpoRouter store uses the linking.getInitialURL to initialize the state\n    // So we need to ensure that the linking.getInitialURL is set to the initial location\n    if (serverLocation && !linking.getInitialURL) {\n      linking.getInitialURL = () => serverUrl;\n    }\n\n    return linking;\n  }\n\n  // Get the +native-intent file from the context\n  const nativeLinkingKey = context\n    .keys()\n    .find((key) => key.match(/^\\.\\/\\+native-intent\\.[tj]sx?$/));\n  const nativeLinking: NativeIntent | undefined = nativeLinkingKey\n    ? context(nativeLinkingKey)\n    : undefined;\n\n  return {\n    ...linking,\n    getInitialURL() {\n      if (linking.getInitialURL) {\n        // If the user has provided a getInitialURL function, use that\n        return linking.getInitialURL();\n      } else if (nativeLinking?.redirectSystemPath) {\n        if (serverUrl) {\n          // Ensure we initialize the router with the SSR location if present\n          return nativeLinking.redirectSystemPath({ path: serverUrl, initial: true });\n        } else {\n          // Otherwise use the initial URL from the system\n          return Linking.getInitialURL().then((url) => {\n            return nativeLinking?.redirectSystemPath?.({ path: url, initial: true });\n          });\n        }\n      } else {\n        return serverUrl;\n      }\n    },\n    subscribe(listener) {\n      if (linking.subscribe) {\n        // If the user has provided a subscribe function, use that\n        return linking.subscribe(listener);\n      }\n\n      const subscription = Linking.addEventListener('url', async ({ url }) => {\n        if (nativeLinking?.redirectSystemPath) {\n          const newPath = await nativeLinking.redirectSystemPath({ path: url, initial: false });\n          if (typeof newPath === 'string') {\n            listener(newPath);\n          }\n        } else {\n          listener(url);\n        }\n      });\n\n      const nativeSubscription = nativeLinking?.subscribe?.(listener);\n\n      return () => {\n        if (typeof nativeSubscription === 'function') {\n          nativeSubscription();\n        }\n        subscription.remove();\n      };\n    },\n  };\n}\n"]}